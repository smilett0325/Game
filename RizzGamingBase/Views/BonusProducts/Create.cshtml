@model RizzGamingBase.Models.ViewModels.BonusProductsCreateVm

@{
    ViewBag.Title = "Create";
}

<h2>新增紅利商品</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        @*<div class="md-3">
                @Html.LabelFor(model => model.TypeName, htmlAttributes: new { @class = "form-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TypeName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TypeName, "", new { @class = "text-danger" })
                </div>
            </div>*@

        @*引入id和name*@
        <input type="hidden" id="productTypeIdHidden" name="ProductTypeId" value="" /> <!-- 用於存儲選擇的 id -->
        <input type="hidden" id="productTypeNameHidden" name="ProductTypeName" value="" /> <!-- 用於存儲選擇的名稱 -->

        <div class="mb-3">
            <div class="ProductTypeSelect">
                <select id="productTypeSelect" class="form-control form-select" data-val="true" data-val-required="請選擇類別">
                    <option value="">--請選擇類別--</option>
                </select>
                <span id="productTypeValidation" class="text-danger"></span>
                @Html.ValidationMessageFor(model => model.ProductTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="md-3">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "form-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="md-3">
            @Html.LabelFor(model => model.URL, htmlAttributes: new { @class = "form-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.URL, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.URL, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="md-3">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "form-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="md-3">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default btn-primary" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var productTypeSelect = document.getElementById("productTypeSelect");
        // to do : 設計成能夠在外部新增新類別並動態添加近來
        var productList =
            [
                { id: 1, name: '靜態頭像' },
                { id: 2, name: '動態頭像' },
                { id: 3, name: '靜態外框' },
                { id: 4, name: '動態外框' },
                { id: 5, name: '靜態貼圖' },
                { id: 6, name: '動態貼圖' },
                { id: 7, name: '靜態主題' },
                { id: 8, name: '動態主題' }
            ];

        productList.forEach(function (item) {
            var option = document.createElement("option");
            option.text = item.name;
            option.value = item.id;
            productTypeSelect.appendChild(option);
        });

        productTypeSelect.addEventListener("change", function () {
            var selectedOption = productTypeSelect.options[productTypeSelect.selectedIndex];
            var productTypeID = selectedOption.value;
            var productTypeText = selectedOption.text;
            console.log(productTypeText);
            console.log(productTypeID);
            if (productTypeID === "") {
                productTypeValidation.innerText = "請選擇類別";
            } else {
                productTypeValidation.innerText = "";
            }
            // 填入隱藏的 input 元素
            document.getElementById("productTypeIdHidden").value = productTypeID;
            document.getElementById("productTypeNameHidden").value = productTypeText;
        });
    </script>
}
