
@{
    ViewBag.Title = "LineChart";
}



<div>
    <label for="Yearbtn" class="form-label">請選擇年份：</label>
    <input type="text" class="form-control" id="Year" name="Year">
</div>


<!-- 引入Chart.js库 -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js"></script>

<!-- 在页面中添加图表容器 -->
<h2 id="h2">2023</h2>
<h2>季度營收</h2>


<div id="Line" style="height:65%;width:65%">
    <canvas id="myChart" width="100" height="100"></canvas>
</div>
<!-- 在页面底部初始化图表 -->
<script>
    var datas = [];

    var theH2 = document.getElementById('h2');

    var ctx = document.getElementById('myChart').getContext('2d');

    var divLine = document.getElementById('Line');
    // 将从Controller传递的数据绑定到图表
    var bardata = [@(ViewBag.BarChartData)];

    const theYear = document.querySelector("#Year");


    // 创建图表

    var myChart = new Chart(ctx, {
        type: 'line', // 替换为所需的图表类型
        data: {
            labels: ['第一季度', '第二季度', '第三季度', '第四季度'],
            datasets: [{
                label: '元',
                data: bardata,
                backgroundColor: 'blue',
                borderColor: 'black',
                borderWidth: 1,

                fill: false
            }]
        },
        options: {
            options: {
                elements: {
                    line: {
                        tension: 0
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    var year = 0;
    theYear.addEventListener('keydown', async event  => {

        if (event.which === 13) {
            year = theYear.value;
            theH2.innerHTML = year;
            await loadDatas();

            myChart.data.datasets[0].data[0] = datas[0];
            myChart.data.datasets[0].data[1] = datas[1];
            myChart.data.datasets[0].data[2] = datas[2];
            myChart.data.datasets[0].data[3] = datas[3];

            myChart.update();
        }
    });

    const loadDatas = async () => {
        const response = await fetch(`@Url.Content("~/GameData/GetLineDataFromDatabase")?year=${year}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
        });

        datas = await response.json();
    }

        // 在這裡處理伺服器的回應結果，例如更新UI
        // result 是從控制器返回的數據，可以用於更新視圖
            
		




</script>
