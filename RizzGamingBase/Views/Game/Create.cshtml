@model RizzGamingBase.Models.ViewModels.DeveloperGameEditVm

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data", id = "fileForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>DeveloperGameEditVm</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div>
            <div class="mb-1"><p class="">新增標籤</p><button type="button" class="btn btn-light" onclick="showTagModal()" onclose="uploadTags()">+</button></div>
            <div id="selectedTagsContainer"></div>
        </div>

        <div id="tagModal" class="modal" tabindex="-1" style="display: none;">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Modal title</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="activeAddTag">
                                //生成已選tag
                            </div>
                            <hr/>
                            //列出全部tag
                            @foreach (var tag in ViewBag.TagList)
                    {
                        <button type="button" class="btn btn-primary btn-sm m-1" onclick="addTag()" data-Id=`@tag.Id`>@tag.Name</button>
                    }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary">Save changes</button>
                        </div>
                    </div>
                </div>
            </div>

        <div class="mb-3">
            <input type="file" name="cover" id="fileInputCov" onchange="coverFileChange()" />
            <button type="button" class="btn btn-primary delete-cover btn-sm" disabled>重新上傳</button>
        </div>
        <div id="coverContainer" class="mb-3"></div>

        <div class="mb-3">
            <input type="file" name="displayImages" id="fileInputImg" onchange="imageFileChange()" multiple />
            <button type="button" class="btn btn-primary delete-img btn-sm" disabled>重新上傳</button>
        </div>
        <div id="imageContainer" class="mb-3"></div>

        <div class="mb-3">
            <input type="file" name="displayVideo" id="fileInputVdo" onchange="videoFileChange()" multiple />
            <button type="button" class="btn btn-primary delete-vdo btn-sm" disabled>重新上傳</button>
        </div>
        <div id="videoContainer" class="mb-3"></div>



        @*<div>
                <input type="file" name="files" id="fileInput" multiple />
                <input type="submit" value="Upload" style="display: none;" />
            </div>

            <div id="imageContainer">
            </div>*@

        @*<div>
                <input type="file" name="files" id="fileInput" multiple />
                <input type="submit" value="Upload" style="display: none;" />
            </div>

            <div id="imageContainer">
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Introduction, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.Introduction, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Introduction, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReleaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.ReleaseDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ReleaseDate, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.MaxPercent, htmlAttributes: new { @class = "control-label col-md-2" })

            @Html.EditorFor(model => model.MaxPercent, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MaxPercent, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" id="submit" />
                <input type="button" value="test" class="btn btn-success" id="test" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@
    <script>
    //var reader = new FileReader();

        var formData = new FormData();

        function coverFileChange() {
            // 获取文件输入框
            var fileInputCov = document.getElementById("fileInputCov");

            //var validFiles = [];  // 用來保存合格的檔案，如有需追蹤做使用

            for (var i = 0; i < fileInputCov.files.length; i++) {
                var file = fileInputCov.files[i];

                // 提取文件名
                var fileName = file.name;
                var fileNameParts = fileName.split('.');
                var mainFileName = fileNameParts.slice(0, -1).join('.');  // 除了最后一个之外的所有部分
                var fileExtension = fileNameParts.slice(-1)[0];  // 最后一个部分
                var allowedExtensions = ['jpg', 'jpeg', 'png'];

                var imgUrl = URL.createObjectURL(file);

                // 判斷附檔名是否符合要求
                if (allowedExtensions.includes(fileExtension.toLowerCase())) {
                    // 符合要求的處理邏輯
                    //validFiles.push(file);
                    formData.append('cover', file);

                    // 顯示圖片
                    $("#coverContainer").append(`
<div class="card d-inline-block" style="width: 18rem;" id="${mainFileName}">
    <img src="${imgUrl}" class="card-img-top" alt="...">
    <div class="card-body">
        <p class="card-text">${mainFileName}</p>
    </div>
</div>
`);
                    $('.delete-cover').prop('disabled', false);
                } else {
                    // 不符合要求的處理邏輯，例如發出警告
                    alert("不符合要求的檔案：" + fileName);
                    document.getElementById('fileInputCov').value = '';
                }
            }

            if (fileInputCov.files.length >= 1) {
                fileInputCov.disabled = true;
                console.log("File input disabled");
            }

            $('.delete-cover').click(function () {
                $('#coverContainer').html("");
                document.getElementById('fileInputCov').value = '';

                $('.delete-cover').prop('disabled', true);
                fileInputCov.disabled = false;

                formData.delete('cover');
            });
        }

        function imageFileChange() {
            // 获取文件输入框
            var fileInputImg = document.getElementById("fileInputImg");

            //var validFiles = [];  // 用來保存合格的檔案，如有需追蹤做使用

            for (var i = 0; i < fileInputImg.files.length; i++) {
                var file = fileInputImg.files[i];

                // 提取文件名
                var fileName = file.name;
                var fileNameParts = fileName.split('.');
                var mainFileName = fileNameParts.slice(0, -1).join('.');  // 除了最后一个之外的所有部分
                var fileExtension = fileNameParts.slice(-1)[0];  // 最后一个部分
                var allowedExtensions = ['jpg', 'jpeg', 'png'];

                var imgUrl = URL.createObjectURL(file);

                // 判斷附檔名是否符合要求
                if (allowedExtensions.includes(fileExtension.toLowerCase())) {
                    // 符合要求的處理邏輯
                    //validFiles.push(file);
                    formData.append('displayImage', file);

                    // 顯示圖片
                    $("#imageContainer").append(`
<div class="card d-inline-block" style="width: 18rem;" id="${mainFileName}">
    <img src="${imgUrl}" class="card-img-top" alt="...">
    <div class="card-body">
        <p class="card-text">${mainFileName}</p>
    </div>
</div>
`);
                    $('.delete-img').prop('disabled', false);
                } else {
                    // 不符合要求的處理邏輯，例如發出警告
                    alert("不符合要求的檔案：" + fileName);
                    document.getElementById('fileInput').value = '';
                }
            }

            if (fileInputImg.files.length >= 5) {
                fileInputImg.disabled = true;
                console.log("File input disabled");
            }

            $('.delete-img').click(function () {
                $('#imageContainer').html("");
                document.getElementById('fileInputImg').value = '';

                $('.delete-img').prop('disabled', true);
                fileInputImg.disabled = false;

                formData.delete('displayImage');
            });
        }

        function videoFileChange() {
            // 获取文件输入框
            var fileInputVdo = document.getElementById("fileInputVdo");

            //var validFiles = [];  // 用來保存合格的檔案，如有需追蹤做使用

            for (var i = 0; i < fileInputVdo.files.length; i++) {
                var file = fileInputVdo.files[i];

                // 提取文件名
                var fileName = file.name;
                var fileNameParts = fileName.split('.');
                var mainFileName = fileNameParts.slice(0, -1).join('.');  // 除了最后一个之外的所有部分
                var fileExtension = fileNameParts.slice(-1)[0];  // 最后一个部分
                var allowedExtensions = ['mp4', 'webm'];

                var vdoUrl = URL.createObjectURL(file);

                console.log(fileName);
                console.log(mainFileName);
                console.log(fileExtension);
                console.log(vdoUrl);

                // 判斷附檔名是否符合要求
                if (allowedExtensions.includes(fileExtension.toLowerCase())) {
                    // 符合要求的處理邏輯
                    //validFiles.push(file);
                    formData.append('displayVideo', file);

                    // 顯示圖片
                    $("#videoContainer").append(`
<div class="card d-inline-block" style="width: 18rem;" id="${mainFileName}">
    <video controls class="card-img-top">
        <source src="${vdoUrl}" type="video/mp4">
    </video>
    <div class="card-body">
        <p class="card-text">${mainFileName}</p>
    </div>
</div>
`);
                    $('.delete-vdo').prop('disabled', false);

                } else {
                    // 不符合要求的處理邏輯，例如發出警告
                    alert("不符合要求的檔案：" + fileName);
                    document.getElementById('fileInput').value = '';
                }
            }

            if (fileInputVdo.files.length >= 2) {
                fileInputVdo.disabled = true;
                console.log("File input disabled");
            }

            $('.delete-vdo').click(function () {
                $('#videoContainer').html("");
                document.getElementById('fileInputVdo').value = '';

                $('.delete-vdo').prop('disabled', true);
                fileInputVdo.disabled = false;

                formData.delete('displayVideo');
            });

            if (fileInputVdo.files.length >= 1) {
                fileInputVdo.disabled = true;
                console.log("File input disabled");
            }
        }

        function showTagModal() {
            $('#tagModal').modal('show');
        }

        function uploadTags() { }

        $('#test').click(function () {
            for (var i = 0; i < ViewBag.TagList.length; i++) {
                var tag = ViewBag.TagList[i];

                console.log(tag.TagName);
                console.log(tag.TagId);
            }
           
        });

    
    $('#submit').click(function () {
        //e.preventDefault();

        @*$.ajax({
            type: 'POST',
            url: '@Url.Action("", "Game")',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response.success) {
                      // 在页面上移除被删除的图片
                    console.log("Removing element with id: " + imageNameToDelete);
                    $('.delete-btn').closest('.card').remove();
                } else {
                    // 在这里添加处理失败后的逻辑
                    console.log("Failed to delete image. Error: " + response.message);
                }
            },
        });*@
    });

        @*$(document).ready(function () {
            $("#fileInput").change(function () {
                // 当文件选择框内容改变时，立即触发上传
                $("#fileForm").submit();
            });

            $("#fileForm").submit(function (e) {
                e.preventDefault(); // 阻止默认的表单提交行为

                var formData = new FormData(this);

                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("coverscratchasync", "Game")',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        if (response.success) {
                            //alert(response.message);

                            // 在这里处理返回的文件信息
                            var images = response.images;
                            for (var i = 0; i < images.length; i++) {
                                var imageUrl = images[i].Name;
                                var imageId = images[i].NameForId;
                                console.log(imageId);

                                //$("#coverContainer").append("<img id='" + imageId +"' src='../Image/Scratch/" + imageUrl + "' alt='Uploaded Image' height='200' class='inlineblock imgs'/>");

                                $("#coverContainer").append(`
    <div class="card d-inline-block" style="width: 18rem;" id="cover${i}">
      <img src="../Image/Scratch/${imageUrl}" class="card-img-top" alt="...">
      <div class="card-body">
        <p class="card-text">${imageUrl}</p>
        <a href="#" class="btn btn-primary delete-btn btn-sm">Delete</a>
      </div>
    </div>
    `);
                                cover.push(imageUrl);

                                $('.delete-btn').click(function () {
                                    var imageNameToDelete = "view1";  // 这里替换成实际的图片信息获取逻辑
                                    var imageNameToDelete1 = "view1.jpg";
                                    // 构造要发送的数据
                                    var dataToSend = {
                                        files: [imageNameToDelete1]
                                    };

                                    $.ajax({
                                        type: 'POST',
                                        url: '@Url.Action("DeleteCoverScratchAsync", "Game")',
                                        data: dataToSend,
                                        success: function (response) {
                                            if (response.success) {
                                                  // 在页面上移除被删除的图片
                                                console.log("Removing element with id: " + imageNameToDelete);
                                                $('.delete-btn').closest('.card').remove();
                                            } else {
                                                // 在这里添加处理失败后的逻辑
                                                console.log("Failed to delete image. Error: " + response.message);
                                            }
                                        },
                                    });

                                    //cover = cover.filter(item => item !== "data2");
                                    cover.shift();

                                    // 创建一个新的文件输入框
                                    var oldInput = document.getElementById("fileInput");
                                    var newInput = oldInput.cloneNode(true);

                                    // 替换旧的文件输入框
                                    oldInput.parentNode.replaceChild(newInput, oldInput);
                                });
                            }
                        } else {
                            /* alert(response.message);*/
                            // 在这里添加处理失败后的逻辑
                        }
                    },
                    //error: function (xhr, status, error) {
                    //    alert("Error: " + error);
                    //    /* 在这里添加处理错误的逻辑*/
                    //}
                });

            });*@




            //todo tag selecter

            //todo discount selecter

            //todo dlc selecter

            //todo submit button





    </script>
}


@section styles {
    <style>
        .aspect-ratio-container {
            position: relative;
            width: calc(200px * 16 / 9); /* 使用calc计算宽度，保持16:9宽高比 */
            height: 200px; /* 固定的像素值，根据需要调整 */
            overflow: hidden;
        }

        .aspect-ratio-item {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: contain; /* 保持比例并填充容器，不裁剪图像 */
            max-width: 100%; /* 图像宽度不超过容器宽度 */
            max-height: 100%; /* 图像高度不超过容器高度 */
        }

        .card-size {
            width: calc(150px * 16 / 9);
            height: 150px;
            object-fit: contain;
        }

        .www {
            width: calc(150px * 16 / 9);
        }
    </style>
}